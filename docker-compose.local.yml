version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: stock_postgres_local
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-stockuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-stockpass123}
      POSTGRES_DB: ${POSTGRES_DB:-stockdb}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data_local:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - stock_network_local
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-stockuser} -d ${POSTGRES_DB:-stockdb}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres 
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: stock_redis_local
    restart: unless-stopped
    volumes:
      - redis_data_local:/data
    ports:
      - "6379:6379"
    networks:
      - stock_network_local
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: stock_zookeeper_local
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_MAX_CLIENT_CNXNS: 60
    volumes:
      - zookeeper_data_local:/var/lib/zookeeper/data
      - zookeeper_logs_local:/var/lib/zookeeper/log
    networks:
      - stock_network_local
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: stock_kafka_local
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms512M"
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    volumes:
      - kafka_data_local:/var/lib/kafka/data
    ports:
      - "9092:9092"
      - "9093:9093"
    networks:
      - stock_network_local
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # LocalStack for AWS Services
  localstack:
    image: localstack/localstack:latest
    container_name: stock_localstack_local
    restart: unless-stopped
    environment:
      - SERVICES=s3,sqs,sns,logs,cloudformation
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - DOCKER_HOST=unix:///var/run/docker.sock
      - PERSISTENCE=1
      - LAMBDA_EXECUTOR=docker
      - LAMBDA_REMOTE_DOCKER=false
    ports:
      - "4566:4566"
      - "4510-4559:4510-4559"
    volumes:
      - localstack_data_local:/tmp/localstack
      - /var/run/docker.sock:/var/run/docker.sock
      - ./localstack:/etc/localstack/init/ready.d
    networks:
      - stock_network_local
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: stock_n8n_local
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-stockdb}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-stockuser}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-stockpass123}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin123
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=America/New_York
    ports:
      - "5678:5678"
    volumes:
      - n8n_data_local:/home/node/.n8n
      - ./n8n/workflows:/home/node/.n8n/workflows
    networks:
      - stock_network_local

  # API Gateway Service
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: stock_api_gateway_local
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-stockuser}:${POSTGRES_PASSWORD:-stockpass123}@postgres:5432/${POSTGRES_DB:-stockdb}
      - REDIS_URL=redis://redis:6379
      - API_PORT=3000
      - ALLOWED_ORIGINS=http://localhost:3001,http://localhost:5678
      - LOG_LEVEL=info
      - NODE_ENV=development
      - JWT_SECRET=local-development-jwt-secret
      - BCRYPT_ROUNDS=10
    ports:
      - "3000:3000"
    volumes:
      - ./services/api-gateway:/app
      - /app/node_modules
    networks:
      - stock_network_local
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Stock Data Ingestion Service
  data-ingestion:
    build:
      context: ./services/data-ingestion
      dockerfile: Dockerfile
    container_name: stock_data_ingestion_local
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-stockuser}:${POSTGRES_PASSWORD:-stockpass123}@postgres:5432/${POSTGRES_DB:-stockdb}
      - KAFKA_BROKERS=kafka:9092
      - REDIS_URL=redis://redis:6379
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY:-demo}
      - YAHOO_FINANCE_API_KEY=${YAHOO_FINANCE_API_KEY:-}
      - POLYGON_API_KEY=${POLYGON_API_KEY:-}
      - LOG_LEVEL=info
      - PORT=3001
      - NODE_ENV=development
    ports:
      - "3002:3001"
    volumes:
      - ./services/data-ingestion:/app
      - /app/node_modules
    networks:
      - stock_network_local
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backtesting Service
  backtesting:
    build:
      context: ./services/backtesting
      dockerfile: Dockerfile
    container_name: stock_backtesting_local
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-stockuser}:${POSTGRES_PASSWORD:-stockpass123}@postgres:5432/${POSTGRES_DB:-stockdb}
      - KAFKA_BROKERS=kafka:9092
      - BACKTEST_START_DATE=${BACKTEST_START_DATE:-2023-01-01}
      - BACKTEST_END_DATE=${BACKTEST_END_DATE:-2023-12-31}
      - BACKTEST_INITIAL_CAPITAL=${BACKTEST_INITIAL_CAPITAL:-100000}
      - BACKTEST_COMMISSION=${BACKTEST_COMMISSION:-0.001}
      - LOG_LEVEL=info
      - PORT=3002
      - NODE_ENV=development
    ports:
      - "3003:3002"
    volumes:
      - ./services/backtesting:/app
      - /app/node_modules
    networks:
      - stock_network_local
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Client Application
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: stock_client_local
    restart: unless-stopped
    depends_on:
      api-gateway:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_BASE_URL=http://localhost:3000
      - NEXT_PUBLIC_WS_URL=ws://localhost:3000
    ports:
      - "3001:3001"
    volumes:
      - ./client:/app
      - /app/node_modules
      - /app/.next
    networks:
      - stock_network_local
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data_local:
    driver: local
  zookeeper_data_local:
    driver: local
  zookeeper_logs_local:
    driver: local
  kafka_data_local:
    driver: local
  redis_data_local:
    driver: local
  n8n_data_local:
    driver: local
  localstack_data_local:
    driver: local

networks:
  stock_network_local:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16