services:
  clickhouse:
    image: clickhouse/clickhouse-server:23.8-alpine
    container_name: stock_clickhouse
    restart: unless-stopped
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./database/clickhouse/init:/docker-entrypoint-initdb.d:ro
      - ./database/clickhouse/config:/etc/clickhouse-server/config.d:ro
    ports:
      - "8123:8123"
      - "9000:9000"
    networks:
      - stock_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  redis:
    image: redis:7-alpine
    container_name: stock_redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - stock_network
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: stock_zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_MAX_CLIENT_CNXNS: 60
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - stock_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: stock_kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    ports:
      - "9092:9092"
      - "9093:9093"
    networks:
      - stock_network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  localstack:
    image: localstack/localstack:latest
    container_name: stock_localstack
    restart: unless-stopped
    environment:
      SERVICES: ${LOCALSTACK_SERVICES}
      DEBUG: ${LOCALSTACK_DEBUG}
      DATA_DIR: ${LOCALSTACK_DATA_DIR}
      DOCKER_HOST: unix:///var/run/docker.sock
      PERSISTENCE: 1
      LAMBDA_EXECUTOR: docker
      LAMBDA_REMOTE_DOCKER: false
    ports:
      - "4566:4566"
      - "4510-4559:4510-4559"
    volumes:
      - localstack_data:/tmp/localstack
      - /var/run/docker.sock:/var/run/docker.sock
      - ./localstack:/etc/localstack/init/ready.d
    networks:
      - stock_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  n8n:
    image: n8nio/n8n:latest
    container_name: stock_n8n
    restart: unless-stopped
    depends_on:
      clickhouse:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      N8N_BASIC_AUTH_ACTIVE: ${N8N_BASIC_AUTH_ACTIVE}
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD}
      N8N_HOST: ${N8N_HOST}
      N8N_PORT: ${N8N_PORT}
      N8N_PROTOCOL: ${N8N_PROTOCOL}
      WEBHOOK_URL: http://localhost:5678/
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/home/node/.n8n/workflows
    networks:
      - stock_network

  api-gateway:
    build:
      context: ./services/api-gateway
    container_name: stock_api_gateway
    restart: unless-stopped
    depends_on:
      clickhouse:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      CLICKHOUSE_URL: ${CLICKHOUSE_URL}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DATABASE: ${CLICKHOUSE_DB}
      REDIS_URL: ${REDIS_URL}
      PORT: ${API_PORT}
    ports:
      - "3000:3000"
    networks:
      - stock_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  data-ingestion:
    build:
      context: ./services/data-ingestion
    container_name: stock_data_ingestion
    restart: unless-stopped
    depends_on:
      clickhouse:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      CLICKHOUSE_URL: ${CLICKHOUSE_URL}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DATABASE: ${CLICKHOUSE_DB}
      KAFKA_BROKERS: ${KAFKA_BROKERS}
      REDIS_URL: ${REDIS_URL}
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL}
      PORT: ${DATA_INGESTION_PORT}
    ports:
      - "3002:3002"
    networks:
      - stock_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  backtesting:
    build:
      context: ./services/backtesting
    container_name: stock_backtesting
    restart: unless-stopped
    depends_on:
      clickhouse:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      CLICKHOUSE_URL: ${CLICKHOUSE_URL}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DATABASE: ${CLICKHOUSE_DB}
      KAFKA_BROKERS: ${KAFKA_BROKERS}
      BACKTEST_START_DATE: ${BACKTEST_START_DATE}
      BACKTEST_END_DATE: ${BACKTEST_END_DATE}
      BACKTEST_INITIAL_CAPITAL: ${BACKTEST_INITIAL_CAPITAL}
      BACKTEST_COMMISSION: ${BACKTEST_COMMISSION}
      LOG_LEVEL: ${LOG_LEVEL}
      PORT: ${BACKTESTING_PORT}
    ports:
      - "3003:3003"
    networks:
      - stock_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  client:
    build:
      context: ./client
    container_name: stock_client
    restart: unless-stopped
    depends_on:
      api-gateway:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV}
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL}
    ports:
      - "3001:3001"
    networks:
      - stock_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  clickhouse_data:
  redis_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  n8n_data:
  localstack_data:

networks:
  stock_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
